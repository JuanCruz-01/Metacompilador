package metacompilador;

import compilerTools.Directory;
import compilerTools.ErrorLSSL;
import compilerTools.Functions;
import compilerTools.Production;
import compilerTools.TextColor;
import compilerTools.Token;
import java.awt.BorderLayout;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTextPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.Element;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledDocument;
import javax.swing.text.StyledEditorKit;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.Timer;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;


public class IDE extends javax.swing.JFrame {
    
    NumeroLinea numeroLinea;
    private JTextPane textPane;
    private JLabel lineNumbers;
    private IDE nuevoIDE = null;
    private File currentFile = null;
    private File archivoAbierto = null;
    private boolean fileChanged = false;
    
    private String title;
    private Directory directorio;
    private ArrayList<Token> tokens;
    private ArrayList<ErrorLSSL> errors;
    private ArrayList<TextColor> textsColor;
    private Timer timerKeyReleased;
    private ArrayList<Production> identProd;
    private HashMap<String, String> identificadores;
    private boolean codeHasBeenCompiled = false;
    

    public IDE() {
        initComponents();
        setTitle("METACOMPILADOR - Archivo 1");
        
       numeroLinea= new NumeroLinea(jtpCode);
       jScrollPane1.setRowHeaderView(numeroLinea);
       
        
        // Deshabilita la edición en el JTextPane
    jTextPane1.setEditable(false);
        
    // Agregar DocumentListener al JTextPane para rastrear cambios
        addDocumentListener();
    }
     
    
    private void addDocumentListener() {
    jtpCode.getDocument().addDocumentListener(new DocumentListener() {
        @Override
        public void insertUpdate(DocumentEvent e) {
            // Se invoca cuando se inserta texto en el JTextPane
            fileChanged = true;
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            // Se invoca cuando se elimina texto del JTextPane
            fileChanged = true;
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            // Este evento se refiere a cambios en atributos, no al texto
        }
    });
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jtpCode = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu6 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem19 = new javax.swing.JMenuItem();
        jMenuItem20 = new javax.swing.JMenuItem();
        jMenuItem21 = new javax.swing.JMenuItem();
        jMenu7 = new javax.swing.JMenu();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenu14 = new javax.swing.JMenu();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenuItem14 = new javax.swing.JMenuItem();
        jMenuItem15 = new javax.swing.JMenuItem();
        jMenu15 = new javax.swing.JMenu();
        jMenuItem16 = new javax.swing.JMenuItem();
        jMenuItem17 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem24 = new javax.swing.JMenuItem();
        jMenuItem26 = new javax.swing.JMenuItem();
        jMenuItem25 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem18 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jtpCode.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jScrollPane1.setViewportView(jtpCode);

        jScrollPane2.setViewportView(jTextPane1);

        jMenu6.setText("Archivo");

        jMenuItem4.setText("Nuevo");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem4);

        jMenuItem2.setText("Abrir");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem2);

        jMenuItem5.setText("Cerrar");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem5);

        jMenuItem3.setText("Guardar");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem3);

        jMenuItem6.setText("Guardar como");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem6);

        jMenuItem1.setText("Salir");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem1);

        jMenuBar1.add(jMenu6);

        jMenu2.setText("Edición");

        jMenuItem7.setText("Cortar");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);

        jMenuItem8.setText("Copiar");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem8);

        jMenuItem9.setText("Pegar");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem9);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Tablas");

        jMenu1.setText("Tablas estáticas");

        jMenuItem19.setText("Tabla de palabras reservadas");
        jMenuItem19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem19ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem19);

        jMenuItem20.setText("Tabla de caracteres especiales");
        jMenuItem20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem20ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem20);

        jMenuItem21.setText("Tablas de operadores");
        jMenuItem21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem21ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem21);

        jMenu3.add(jMenu1);

        jMenu7.setText("Tablas dinámicas");

        jMenuItem10.setText("Tabla de simbolos");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu7.add(jMenuItem10);

        jMenuItem11.setText("Tabla de identificadores");
        jMenu7.add(jMenuItem11);

        jMenuItem12.setText("Tabla de errores");
        jMenu7.add(jMenuItem12);

        jMenu14.setText("Tabla de constantes numericas");

        jMenuItem13.setText("Enteros");
        jMenu14.add(jMenuItem13);

        jMenuItem14.setText("Reales");
        jMenu14.add(jMenuItem14);

        jMenuItem15.setText("Cientificos");
        jMenu14.add(jMenuItem15);

        jMenu7.add(jMenu14);

        jMenu15.setText("Tabla de constantes no numericas");

        jMenuItem16.setText("Caracteres");
        jMenu15.add(jMenuItem16);

        jMenuItem17.setText("Cadenas");
        jMenu15.add(jMenuItem17);

        jMenu7.add(jMenu15);

        jMenu3.add(jMenu7);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("Análisis");

        jMenuItem24.setText("Lexico");
        jMenuItem24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem24ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem24);

        jMenuItem26.setText("Sintactico");
        jMenuItem26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem26ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem26);

        jMenuItem25.setText("Semantico");
        jMenuItem25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem25ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem25);

        jMenuBar1.add(jMenu4);

        jMenu5.setText("Acerca de");

        jMenuItem18.setText("Integrantes del proyecto");
        jMenuItem18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem18ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem18);

        jMenuBar1.add(jMenu5);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 839, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

            private void mostrarVentanaIntegrantes() {
    VentanaIntegrantes ventana = new VentanaIntegrantes();
    ventana.setVisible(true);
}
            
            
            private void copiarTexto() {
    // Obtiene el texto seleccionado en el JTextPane
    String selectedText = jtpCode.getSelectedText();
    
    // Verifica si hay texto seleccionado
    if (selectedText != null && !selectedText.isEmpty()) {
        // Obtiene el portapapeles del sistema
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        
        // Crea un objeto de transferencia de texto
        Transferable selection = new StringSelection(selectedText);
        
        // Coloca el texto en el portapapeles
        clipboard.setContents(selection, null);
    }
}
            
            
                    private void cortarTexto() {
    // Obtiene el texto seleccionado en el JTextPane
    String selectedText = jtpCode.getSelectedText();
    
    // Verifica si hay texto seleccionado
    if (selectedText != null && !selectedText.isEmpty()) {
        // Obtiene el portapapeles del sistema
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        
        // Crea un objeto de transferencia de texto
        Transferable selection = new StringSelection(selectedText);
        
        // Coloca el texto en el portapapeles
        clipboard.setContents(selection, null);
        
        // Elimina el texto seleccionado del JTextPane
        jtpCode.replaceSelection("");
    }
}
                    
                    
                    
                    private void pegarTexto() {
    // Obtiene el portapapeles del sistema
    Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
    
    // Obtiene el contenido actual del portapapeles
    Transferable clipData = clipboard.getContents(clipboard);
    
    if (clipData.isDataFlavorSupported(DataFlavor.stringFlavor)) {
        try {
            // Obtiene el texto desde el portapapeles
            String clipboardText = (String) clipData.getTransferData(DataFlavor.stringFlavor);
            
            // Obtiene la posición actual del cursor en el JTextPane
            int caretPosition = jtpCode.getCaretPosition();
            
            // Inserta el texto desde el portapapeles en la ubicación del cursor
            jtpCode.getDocument().insertString(caretPosition, clipboardText, null);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}
                    
        
                    
            private void guardar(){
        if (currentFile != null) {
        // El archivo ya existe, guarda los cambios
        try {
            BufferedWriter writer = new BufferedWriter(new FileWriter(currentFile));
            writer.write(jtpCode.getText());
            writer.close();
            
            setTitle("METACOMPLIADOR - " + currentFile.getName());
             fileChanged = false; // Marcamos que no hay cambios sin guardar
           // JOptionPane.showMessageDialog(this, "Cambios guardados exitosamente.");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al guardar los cambios.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        // El archivo no existe, ejecuta "Guardar como"
        guardarComo();
    }
    }            



            private void guardarComo(){
        JFileChooser fileChooser = new JFileChooser();

    int option = fileChooser.showSaveDialog(this);

    if (option == JFileChooser.APPROVE_OPTION) {
        File selectedFile = fileChooser.getSelectedFile();

        if (!selectedFile.getName().toLowerCase().endsWith(".txt")) {
            selectedFile = new File(selectedFile.getPath() + ".txt");
        }

        if (selectedFile.exists()) {
            int response = JOptionPane.showConfirmDialog(this, "El archivo ya existe. ¿Desea sobrescribirlo?", "Confirmar", JOptionPane.YES_NO_OPTION);
            if (response != JOptionPane.YES_OPTION) {
                return;
            }
        }

        try {
            FileWriter fileWriter = new FileWriter(selectedFile);
            jtpCode.write(fileWriter);
            fileWriter.close();
            currentFile = selectedFile;
            setTitle("METACOMPLIADOR - " + currentFile.getName());
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
    }                        
    
            

           private void cerrarArchivo() {
 if (fileChanged) {
        int respuesta = JOptionPane.showConfirmDialog(this, "¿Desea guardar los cambios antes de cerrar?", "Guardar Cambios", JOptionPane.YES_NO_CANCEL_OPTION);

        if (respuesta == JOptionPane.YES_OPTION) {
            guardar();
        } else if (respuesta == JOptionPane.CANCEL_OPTION) {
            return;
        }
    }

    jtpCode.setVisible(false);
    numeroLinea.setVisible(false);
    jMenuBar1.setVisible(true);
    currentFile = null;
    setTitle("METACOMPILADOR");
    repaint();
}

           
           
           private void nuevoArchivo(){
      if (fileChanged) {
        int respuesta = JOptionPane.showConfirmDialog(this, "¿Desea guardar los cambios antes de crear un nuevo archivo?", "Guardar Cambios", JOptionPane.YES_NO_CANCEL_OPTION);

        if (respuesta == JOptionPane.YES_OPTION) {
            guardar();
        } else if (respuesta == JOptionPane.CANCEL_OPTION) {
            return;
        }
    }

    // Ahora puedes crear un nuevo archivo en blanco
    jtpCode.setText("");
    currentFile = null;
    setTitle("METACOMPILADOR - Archivo 1");
    jtpCode.setVisible(true); 
             numeroLinea.setVisible(true);
    fileChanged = false;
}
     
           
           private void abrirArchivo(){
               JFileChooser fileChooser = new JFileChooser();
    fileChooser.setFileFilter(new FileNameExtensionFilter("Archivos de Texto", "txt"));

    int option = fileChooser.showOpenDialog(this);

    if (option == JFileChooser.APPROVE_OPTION) {
        File selectedFile = fileChooser.getSelectedFile();

        try {
            FileReader fileReader = new FileReader(selectedFile);
            BufferedReader bufferedReader = new BufferedReader(fileReader);
            StringBuilder content = new StringBuilder();
            String line;

            while ((line = bufferedReader.readLine()) != null) {
                content.append(line).append("\n");
            }

            jtpCode.setText(content.toString());
            currentFile = selectedFile;
            jtpCode.setVisible(true); 
             numeroLinea.setVisible(true);
            setTitle("METACOMPLIADOR - " + currentFile.getName());
            
            fileChanged = false;
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error al abrir el archivo.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
           }
            
           
           
private void mostrarVentanaPalabrasReservadas() {
        String[] cabezera = {"ID", "TOKEN", "ALIAS"};
        String[][] datos = {
                {"1","int","1"},
                {"2","char","1"},
                {"3","double","1"},
                {"4","boolean","1"},
                {"5","string","1"},
                {"6","scanner","1"},
                {"7","public","1"},
                {"8","class","1"},
                {"9","main","1"},
                {"10","System.out.print","1"},
                {"11","if","1"},
                {"12","switch","1"},
                {"13","for","1"},
                {"14","while","1"},
                {"15","do while","1"},
          
        };

        DefaultTableModel mod = new DefaultTableModel(datos, cabezera);

        JTable tabla = new JTable(mod);

        JScrollPane scroll = new JScrollPane(tabla);
        scroll.setBounds(40, 40, 400, 300);

        JFrame ventanaPalabrasReservadas = new JFrame();
        ventanaPalabrasReservadas.setLayout(null);
        ventanaPalabrasReservadas.setSize(500, 500);
        ventanaPalabrasReservadas.setLocationRelativeTo(null);
        ventanaPalabrasReservadas.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        ventanaPalabrasReservadas.add(scroll);

        ventanaPalabrasReservadas.setVisible(true);
    }



private void mostrarVentanaCaracteres() {
        String[] cabezera = {"ID","TOKEN", "ALIAS"};
        String[][] datos = {
                {"1","A","2"},{"2","B","2"},{"3","C","2"},{"4","D","2"},{"5","E","2"},{"6","F","2"},{"7","G","2"},{"8","H","2"},{"9","I","2"},{"10","J","2"},{"11","K","2"},{"12","L","2"},{"13","M","2"},{"14","N","2"},{"15","O","2"},{"16","P","2"},{"17","Q","2"},{"18","R","2"},{"19","S","2"},{"20","T","2"},{"21","U","2"},{"22","V","2"},{"23","W","2"},{"24","X","2"},{"25","Y","2"},{"26","Z","2"},
                {"27","a","2"},{"28","b","2"},{"29","c","2"},{"30","d","2"},{"31","e","2"},{"32","f","2"},{"33","g","2"},{"34","h","2"},{"35","i","2"},{"36","j","2"},{"37","k","2"},{"38","l","2"},{"39","m","2"},{"40","n","2"},{"41","o","2"},{"42","p","2"},{"43","q","2"},{"44","r","2"},{"45","s","2"},{"46","t","2"},{"47","u","2"},{"48","v","2"},{"49","w","2"},{"50","x","2"},{"51","y","2"},{"52","z","2"},
                {"53","!","2"},{"54","¡","2"},{"55","°","2"},{"56","|","2"},{"57"," ","2"},{"58","#","2"},{"59","$","2"},{"60","&","2"},{"61","(","2"},{"62",")","2"},{"63","¿","2"},{"64","?","2"},{"65","'","2"},{"66","@","2"},{"67","\\\\","2"},{"68","[","2"},{"69","]","2"},{"70","{","2"},{"71","}","2"},{"72",",","2"},{"73",";","2"},{"74",".","2"},{"75",":","2"},{"76","_","2"},
        {"77","0","2"},{"78","1","2"},{"79","2","2"},{"80","3","2"},{"81","4 ","2"},{"82","5","2"},{"83","6","2"},{"84","7","2"},{"85","8","2"},{"86","9","2"},
        };

        DefaultTableModel mod = new DefaultTableModel(datos, cabezera);

        JTable tabla = new JTable(mod);

        JScrollPane scroll = new JScrollPane(tabla);
        scroll.setBounds(40, 40, 600, 300);

        JFrame ventanaPalabrasReservadas = new JFrame();
        ventanaPalabrasReservadas.setLayout(null);
        ventanaPalabrasReservadas.setSize(700, 500);
        ventanaPalabrasReservadas.setLocationRelativeTo(null);
        ventanaPalabrasReservadas.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        ventanaPalabrasReservadas.add(scroll);

        ventanaPalabrasReservadas.setVisible(true);
    }




private void mostrarVentanaOperadores() {
        String[] cabezera = {"ID","TOKEN","ALIAS"};
        String[][] datos = {
                {"1","+","3"},{"2","-","3"},{"3","*","3"},{"4","/","3"},{"5","%","3"},{"6","=","3"},{"7","<","3"},{"8",">","3"},{"9",">=","3"},{"10","<=","3"},{"11","!=","3"},{"12","==","3"},{"13","&&","3"},{"14","!","3"},{"15","||","3"},
        };

        DefaultTableModel mod = new DefaultTableModel(datos, cabezera);

        JTable tabla = new JTable(mod);

        JScrollPane scroll = new JScrollPane(tabla);
        scroll.setBounds(40, 40, 400, 300);

        JFrame ventanaPalabrasReservadas = new JFrame();
        ventanaPalabrasReservadas.setLayout(null);
        ventanaPalabrasReservadas.setSize(500, 500);
        ventanaPalabrasReservadas.setLocationRelativeTo(null);
        ventanaPalabrasReservadas.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        ventanaPalabrasReservadas.add(scroll);

        ventanaPalabrasReservadas.setVisible(true);
    }
               
               
       

    
    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        nuevoArchivo();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        
        
        if (fileChanged) {
        int respuesta = JOptionPane.showConfirmDialog(this, "¿Desea guardar los cambios antes de abrir un nuevo archivo?", "Guardar Cambios", JOptionPane.YES_NO_CANCEL_OPTION);

        if (respuesta == JOptionPane.YES_OPTION) {
            guardar();
        } else if (respuesta == JOptionPane.CANCEL_OPTION) {
            // El usuario canceló la operación, no se abrirá un nuevo archivo
            return;
        }
    }

    abrirArchivo();
        
        
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
       cerrarArchivo();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        guardar();
        fileChanged = false;
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        guardarComo();
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
          

        // Verificar si hay cambios sin guardar
    if (fileChanged) {
        int respuesta = JOptionPane.showConfirmDialog(this, "¿Desea guardar los cambios antes de salir?", "Guardar Cambios", JOptionPane.YES_NO_CANCEL_OPTION);

        if (respuesta == JOptionPane.YES_OPTION) {
            guardar();
        } else if (respuesta == JOptionPane.CANCEL_OPTION) {
            // El usuario canceló la operación, no se cierra la aplicación
            return;
        }
    }
    System.exit(0); // Cierra la aplicación
    
    
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        cortarTexto();
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        copiarTexto();
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
            pegarTexto();
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem19ActionPerformed
            mostrarVentanaPalabrasReservadas();
    }//GEN-LAST:event_jMenuItem19ActionPerformed

    private void jMenuItem18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem18ActionPerformed
        mostrarVentanaIntegrantes();
    }//GEN-LAST:event_jMenuItem18ActionPerformed

    private void jMenuItem24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem24ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem24ActionPerformed

    private void jMenuItem26ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem26ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem26ActionPerformed

    private void jMenuItem25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem25ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem25ActionPerformed

    private void jMenuItem20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem20ActionPerformed
        mostrarVentanaCaracteres();
    }//GEN-LAST:event_jMenuItem20ActionPerformed

    private void jMenuItem21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem21ActionPerformed
        mostrarVentanaOperadores();
    }//GEN-LAST:event_jMenuItem21ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IDE().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu14;
    private javax.swing.JMenu jMenu15;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem15;
    private javax.swing.JMenuItem jMenuItem16;
    private javax.swing.JMenuItem jMenuItem17;
    private javax.swing.JMenuItem jMenuItem18;
    private javax.swing.JMenuItem jMenuItem19;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem20;
    private javax.swing.JMenuItem jMenuItem21;
    private javax.swing.JMenuItem jMenuItem24;
    private javax.swing.JMenuItem jMenuItem25;
    private javax.swing.JMenuItem jMenuItem26;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextPane jtpCode;
    // End of variables declaration//GEN-END:variables
}
